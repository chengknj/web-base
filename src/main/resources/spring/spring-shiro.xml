<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	    http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
        anon:           例子/admins/**=anon 没有参数，表示可以匿名使用
        authc:          例如/admins/user/**=authc 表示需要认证(登录)才能使用，没有参数
        roles:          例子/admins/user/**=roles[admin],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，当有多个参数时，
                        例如admins/user/**=roles["admin,guest"],每个参数通过才算通过，相当于hasAllRoles()方法
        perms:          例子/admins/user/**=perms[user:add:*],参数可以写多个，多个时必须加上引号，并且参数之间用逗号分割，
                        例如/admins/user/**=perms["user:add:*,user:modify:*"]，当有多个参数时必须每个参数都通过才通过，想当于isPermitedAll()方法
        rest:           例子/admins/user/**=rest[user],根据请求的方法，相当于/admins/user/**=perms[user:method] ,其中method为post，get，delete等
        port:           例子/admins/user/**=port[8081],当请求的url的端口不是8081是跳转到schemal://serverName:8081?queryString,其中schmal是协议http或https等，
                        serverName是你访问的host,8081是url配置里port的端口，queryString是你访问的url里的？后面的参数
        authcBasic:     例如/admins/user/**=authcBasic 没有参数表示httpBasic认证
        ssl:            例子/admins/user/**=ssl 没有参数，表示安全的url请求，协议为https
        user:           例如/admins/user/**=user 没有参数表示必须存在用户，当登入操作时不做检查

        注：anon，authcBasic，auchc，user是认证过滤器，perms，roles，ssl，rest，port是授权过滤器

        securityManager:        Shiro的核心安全接口，这个属性是必须的
        loginUrl:               要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面
        successUrl:             登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码)
        unauthorizedUrl:        授权失败，跳转的路径
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login/login.html"/>
        <property name="successUrl" value="/views/index.html" />
        <property name="unauthorizedUrl" value="/views/login/login.html"/>
        <property name="filterChainDefinitions">
            <value>
                <!--允许访问登录界面-->
                /views/login/** = anon
                <!--允许访问资源文件-->
                /resources/** = anon
                <!-- 允许访问登录请求 -->
                /login/login.json = authc
                /favicon.ico = anon

                /views/index.html = anon
                /** = authc
            </value>
        </property>
    </bean>

    <!-- Shiro安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userLoginRealm"/>
        <property name="cacheManager" ref="cacheManager"/>
    </bean>

    <!-- 自定义realm -->
    <bean id="userLoginRealm" class="com.ck.web.manager.shiro.UserLoginRealm"/>

    <!--
        使用Shiro自带的JdbcRealm类
        指定密码匹配所需要用到的加密对象
        指定存储用户、角色、权限许可的数据源及相关查询语句
    -->
    <!--<bean id="sampleRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
        <property name="dataSource" ref="dataSource" />
        &lt;!&ndash;登录认证用户的查询SQL，需要用登录用户名作为条件，查询密码字段。&ndash;&gt;
        <property name="authenticationQuery"
                  value="select t.LOGIN_PWD from t_user_info t where t.LOGIN_NO = ?" />

        &lt;!&ndash; 用户角色查询SQL，需要通过登录用户名去查询 &ndash;&gt;
        &lt;!&ndash;<property name="userRolesQuery"
                  value="select a.rolename from my_user_role t left join my_role a on t.roleid = a.id where t.username = ? " />&ndash;&gt;

        &lt;!&ndash; 用户的权限资源查询SQL，需要用单一角色查询角色下的权限资源，如果存在多个角色，则是遍历每个角色，分别查询出权限资源并添加到集合中 &ndash;&gt;
        &lt;!&ndash;<property name="permissionsQuery"
                  value="SELECT B.PERMISSION FROM MY_ROLE T LEFT JOIN MY_ROLE_PERMISSION A ON T.ID = A.ROLE_ID LEFT JOIN MY_PERMISSION B ON A.PERMISSION = B.ID WHERE T.ROLENAME = ? " />&ndash;&gt;

        &lt;!&ndash; 默认false,False时不会使用permissionsQuery的SQL去查询权限资源 &ndash;&gt;
        <property name="permissionsLookupEnabled" value="false" />
        &lt;!&ndash; 密码是否加盐，默认是NO_SALT不加盐 加盐有三种选择CRYPT,COLUMN,EXTERNAL,详细见文档&ndash;&gt;
        <property name="saltStyle" value="NO_SALT" />
        &lt;!&ndash; 密码匹配规则 &ndash;&gt;
        <property name="credentialsMatcher" ref="hashedCredentialsMatcher" />
    </bean>-->

    <!--
    密码匹配规则
    hashAlgorithmName ：             必须的，没有默认值。可以有MD5或者SHA-1，如果对密码安全有更高要求可以用SHA-256或者更高
    storedCredentialsHexEncoded ：   默认是true，此时用的是密码加密用的是Hex编码；false时用Base64编码
    hashIterations ：                迭代次数，默认值是1
     -->
    <bean id="hashedCredentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="MD5" />
        <property name="storedCredentialsHexEncoded" value="true" />
        <property name="hashIterations" value="1" />
    </bean>

    <!-- shiro生命周期处理器 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- shiro ehcache配置 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"/>

</beans>